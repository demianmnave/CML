
name: msvc
on:
  push:
    paths:
      - '.github/**'
      - 'cmake/**'
      - 'cml/**'
      - 'tests/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
      - 'CML.cmake'
      - 'vcpkg.json'

jobs:
  msvc-17:
    strategy:
      fail-fast: false
      matrix:
        include:
        - ver: "14.40"
          vsver: "17.10"
        # - ver: "14.42"
        #   vsver: "17.12"
        # - ver: "14.44"
        #   vsver: "17.14"
    env:
      # Consumed by .msvc-17 in cmake/presets/msvc.json:
      MSVC_TOOLSET_VERSION: ${{ matrix.ver }}
    name: "(msvc-17-${{ matrix.ver }})"
    runs-on: windows-latest
    steps:
        # Set the number of CMake build and test jobs
      - name: Set CMake and CTest concurrency
        shell: pwsh
        run: |
          $ncore = (Get-WmiObject -Class Win32_Processor -Property NumberOfCores `
                   | Measure-Object -Property NumberOfCores -Sum).Sum
          "CMAKE_BUILD_PARALLEL_LEVEL=$($ncore)" | Out-File -Append $env:GITHUB_ENV
          "CTEST_PARALLEL_LEVEL=$($ncore)" | Out-File -Append $env:GITHUB_ENV
      - name: Install MSVC ${{ matrix.ver }}.${{ matrix.vsver }}
        shell: pwsh
        run: |
          # Determine if the required MSVC version is already installed:
          $workload = "Microsoft.VisualStudio.Component.VC.${{ matrix.ver }}.${{ matrix.vsver }}.x86.x64"
          Write-Host "Determining if $($workload) is installed..."

          Install-Module -Name VSSetup -Force
          $install = Get-VSSetupInstance -All | Select-VSSetupInstance -Require "$($workload)" | Select-Object -First 1
          if($null -eq $install) {
            Write-Host "... installing $($workload)"

            $vsinstaller = 'C:/Program Files (x86)/Microsoft Visual Studio/Installer/vs_installer.exe'
            if(!(Test-Path -Path $vsinstaller)) {
              Write-Error "Could not locate the Visual Studio installer"
              Exit 1;
            }

            Start-Process -NoNewWindow -Wait -FilePath $vsinstaller -ArgumentList `
              'modify', '--installPath', "`"$vspath`"", '--quiet', '--norestart', '--nocache', '--noUpdateInstaller', `
              '--add', "$($workload)"

            # Should exist now:
            $install = Get-VSSetupInstance -All | Select-VSSetupInstance -Require "$($workload)" | Select-Object -First 1
            if($null -eq $install) {
              Write-Error "Installation of $($workload) failed"
              Exit 1;
            }
          } else {
            Write-Host "... $($workload) installed for $($install.InstallationPath)"
          }
      - uses: actions/checkout@v4
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.31.0"
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
      - name: Build
        shell: pwsh
        run: |
          $config = 'msvc-17-mt-s-vcpkg'
          $build = 'msvc-17-mt-s-vcpkg-release'
          Write-Host "Executing $($config) and $($build) for MSVC $($env:MSVC_TOOLSET_VERSION) with VCPKG_ROOT @ $($env:VCPKG_ROOT)"
          cmake --preset=$config
          cmake --build --preset=$build

      # - name: Build and test
      #   shell: pwsh
      #   run: |
      #      $preset = msvc-17-mt-s-vcpkg-release-test
      #      Write-Host "Executing $($preset) for MSVC $($env:MSVC_TOOLSET_VERSION) with VCPKG_ROOT @ $($env:VCPKG_ROOT)"
      #      cmake --workflow --preset=$preset