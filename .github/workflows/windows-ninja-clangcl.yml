
name: windows-ninja-clangcl
on:
  pull_request:
    paths:
      - '.github/**'
      - 'cmake/**'
      - 'cml/**'
      - 'tests/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
      - 'CML.cmake'
      - 'vcpkg.json'

jobs:
  build-and-test:
    name: "windows-ninja-clangcl-mt-s-vcpkg"
    runs-on: windows-latest
    steps:
        # Set the number of CMake build and test jobs
      - name: Set CMake and CTest concurrency
        shell: pwsh
        run: |
          $ncore = (Get-WmiObject -Class Win32_Processor -Property NumberOfCores `
                   | Measure-Object -Property NumberOfCores -Sum).Sum
          "CMAKE_BUILD_PARALLEL_LEVEL=$($ncore)" | Out-File -Append $env:GITHUB_ENV
          "CTEST_PARALLEL_LEVEL=$($ncore)" | Out-File -Append $env:GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.31.0"
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
      - name: Build and test
        shell: pwsh
        run: |
           $preset = 'windows-ninja-clangcl-mt-s-vcpkg'
           Write-Host "Executing workflow $($preset) with VCPKG_ROOT @ $($env:VCPKG_ROOT)"
           cmake --workflow --preset=$preset
      - name: Generate JUnit test results
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: "ctest.xml"
          status-check-name: "windows-ninja-clangcl-mt-s CTest Report"
          status-check: true
          annotate: true
          summary: true
          use-suite-name: true
          file-report: true
          failed-report: true
          upload-artifact: false
          integrations-config: |
            {
              "junit-to-ctrf": {
                "enabled": true,
                "action": "convert",
                "options": {
                  "output": "ctrf.json",
                  "toolname": "junit-to-ctrf",
                  "useSuiteName": false,
                  "env": {
                    "appName": "cml"
                  }
                }
              }
            }
        if: ${{ always() }}